{"version":3,"sources":["data/types/state.ts","lib/firebase/index.js","api/players.ts","components/Players/Players.tsx","api/utils.ts","data/actions/players.ts","components/Players/PlayersContainer.ts","components/Home/Home.tsx","components/PlayerName/PlayerName.tsx","data/selectors/players.ts","components/PlayerName/PlayerNameContainer.ts","api/games.ts","components/GameForm/GameForm.tsx","data/actions/games.ts","components/GameForm/GameFormContainer.ts","components/DateText/DateText.tsx","components/Games/Games.tsx","data/selectors/games.ts","components/Games/GamesContainer.ts","components/WinRate/WinRate.tsx","components/PlayerProfile/PlayerProfile.tsx","components/Game/Game.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","data/reducers/games.ts","data/reducers/players.ts","data/reducers/index.ts","App.tsx","data/store/configureStore.ts","serviceWorker.js","index.js"],"names":["STATUS","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getPlayerById","id","database","ref","concat","once","then","snapshot","val","Players","_ref","status","players","fetchAllPlayers","_useState","useState","_useState2","Object","slicedToArray","input","setInput","NOT_REQUESTED","react_default","a","createElement","className","name","value","onChange","event","currentTarget","placeholder","onClick","push","set","key","addPlayer","disabled","length","map","_ref2","react_router_dom","to","arrayFromObject","obj","keys","gamesByPlayerId","games","filter","game","player1Id","player2Id","playersPlayerPlayed","player","allGames","uniqueOpponentIds","forEach","opponentId","opponentForGame","indexOf","PLAYERS_RECEIVE_ALL","PLAYERS_RECEIVE_PLAYER","PLAYERS_PENDING","dispatch","receiveAllPlayers","type","payload","playerPending","receivePlayer","connect","state","byId","Home","PlayerName","fetchPlayer","pending","getPlayerName","isPlayerPending","ownProps","getAllGames","GameForm","onAddGame","player1","setPlayer1","_useState3","_useState4","player2","setPlayer2","_useState5","_useState6","player1Score","setPlayer1Score","_useState7","_useState8","player2Score","setPlayer2Score","button","winnerId","time","ServerValue","TIMESTAMP","addGame","Fragment","e","max","min","Number","_ref3","fetchAllGames","receiveAllGames","GAMES_RECEIVE_ALL","GAMES_RECEIVE_N_GAMES","DateText","date","style","color","fontSize","textTransform","letterSpacing","Date","moment","startOf","fromNow","timeFromNow","GamesPage","props","GameFormContainer","components_DateText_DateText","PlayerNameContainer","last12Games","n","slice","reverse","Games","WinRate","gamesBetweenTwoPlayers","gamesBetweenPlayers","player1Wins","Math","round","PlayerProfile","match","info","setInfo","allGamesPlayed","setAllGamesPlayed","playersPlayed","setPlayersPlayed","userId","params","asyncToGenerator","regenerator_default","mark","_callee","response","sortedGames","wrap","_context","prev","next","sent","stop","apply","this","arguments","fetchAllOpponents","_callee2","opponentIds","_context2","_x","_x2","useEffect","gamesPlayed","components_WinRate_WinRate","GamePage","history","gameId","setGame","removeGame","window","confirm","remove","deleteGame","marginBottom","format","dateFormat","Routes","react_router","exact","path","component","Game","Header","defaultState","GamesReducer","undefined","action","objectSpread","FULFILLED","PlayersReducer","defineProperty","rootReducer","combineReducers","store","preloadedState","createStore","composeWithDevTools","applyMiddleware","thunk","configureStore","App","es","basename","process","components_Header_Header","Routes_Routes","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b63e4159.chunk.js","sourcesContent":["import { Games, Players } from \"../../api/types\";\n\nexport enum STATUS {\n  NOT_REQUESTED = \"NOT_REQUESTED\",\n  PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\"\n}\n\nexport interface State {\n  games: {\n    byId: Games;\n    pending: {\n      [key: string]: boolean;\n    };\n    status: STATUS;\n  };\n  players: {\n    byId: Players;\n    pending: {\n      [key: string]: boolean;\n    };\n    status: STATUS;\n  };\n}\n","import firebase from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAyIdR5rJ6p-JX5BVMeoksBURFgAs5mD5U\",\n  authDomain: \"pool-party-app.firebaseapp.com\",\n  databaseURL: \"https://pool-party-app.firebaseio.com\",\n  projectId: \"pool-party-app\",\n  storageBucket: \"pool-party-app.appspot.com\",\n  messagingSenderId: \"875916367186\",\n  appId: \"1:875916367186:web:71a4c5d40ff62bda\"\n};\n\nexport default firebase.initializeApp(firebaseConfig);","import firebase from '../lib/firebase';\n\nexport const getAllPlayers = () => {\n  return firebase\n    .database()\n    .ref('players')\n    .once('value')\n    .then(snapshot => snapshot.val());\n}\n\nexport const getPlayerById = (id: string) => {\n  return firebase\n    .database()\n    .ref(`players/${id}`)\n    .once('value')\n    .then(snapshot => snapshot.val());\n}\n\ntype AddPlayer = (playerInfo: {name: string}) => Promise<any>;\nexport const addPlayer: AddPlayer = ({ name }) => {\n  const ref = firebase\n    .database()\n    .ref('players/')\n    .push();\n\n  return ref.set({\n    id: ref.key,\n    name,\n  });\n}","import React, { useState, FC } from \"react\";\n\nimport { addPlayer } from \"../../api/players\";\nimport { Player } from \"../../api/types\";\nimport { Link } from \"react-router-dom\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface StateProps{\n  readonly players: Player[];\n  readonly status: STATUS;\n}\n\nexport interface DispatchProps {\n  fetchAllPlayers(): void;\n}\n\nexport type PlayersProps = StateProps & DispatchProps;\n\nconst Players: FC<PlayersProps> = ({ status, players, fetchAllPlayers}) => {\n  const [input, setInput] = useState(\"\");\n\n  if (status === STATUS.NOT_REQUESTED) {\n    fetchAllPlayers();\n  }\n\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.currentTarget.value);\n  };\n\n  const submit = () => {\n    addPlayer({ name: input }).then(() => {\n      fetchAllPlayers();\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"Players\">\n      <h1>Players</h1>\n      <input\n        name=\"name\"\n        value={input}\n        onChange={onInputChange}\n        placeholder=\"Player name\"\n      />\n      <button onClick={submit} disabled={input.length < 1}>Add Player</button>\n      <ul>\n        {players.map(({id, name}) => (\n          <li key={id}>\n            <Link to={`/players/${id}`}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Players;\n","import { Game, Player } from \"./types\";\nimport moment from 'moment';\n\ninterface Obj {\n  [key: string]: any;\n}\n\nexport const arrayFromObject = (obj: Obj) =>\n  Object.keys(obj).map(key => obj[key]);\n\ntype GamesByPlayerId = (games: Game[], id: Player[\"id\"]) => Game[];\nexport const gamesByPlayerId: GamesByPlayerId = (games, id) =>\n  games.filter(game => game.player1Id === id || game.player2Id === id);\n\ntype GamesBetweenPlayers = (player1Id: Player['id'], player2Id: Player['id'], games: Game[]) => Game[];\nexport const gamesBetweenPlayers: GamesBetweenPlayers = (player1Id, player2Id, games) =>\n  games.filter(game => (\n    (game.player1Id === player1Id && game.player2Id === player2Id)\n    || \n    (game.player1Id === player2Id && game.player2Id === player1Id)\n  ));\n\ntype OpponentForGame = (player: Player, game: Game) => Player['id'];\nexport const opponentForGame: OpponentForGame = (player, game) => \n  (game.player1Id === player.id ? game.player2Id : game.player1Id);\n\ntype PlayersPlayerPlayed = (player: Player, allGames: Game[]) => Player['id'][];\nexport const playersPlayerPlayed: PlayersPlayerPlayed = (player, allGames) => {\n  const uniqueOpponentIds: Player['id'][] = [];\n  const gamesPlayerPlayed = gamesByPlayerId(allGames, player.id);\n\n  gamesPlayerPlayed.forEach(game => {\n    const opponentId = opponentForGame(player, game);\n    if (uniqueOpponentIds.indexOf(opponentId) < 0) {\n      uniqueOpponentIds.push(opponentId);\n    }\n  });\n\n  return uniqueOpponentIds;\n};\n\nexport const timeFromNow = (time: string) => {\n  const date = new Date(time);\n  const momentFormat = moment(date);\n\n  return momentFormat.startOf().fromNow();\n}\n\nexport const dateFormat = (time: string) => {\n  const date = new Date(time);\n  const momentFormat = moment(date).format('MMMM Do, YYYY - h:mm a');\n\n  return momentFormat;\n}","import { Dispatch } from \"redux\";\nimport { getAllPlayers, getPlayerById } from \"../../api/players\";\nimport { Players, Player } from \"../../api/types\";\n\nexport const PLAYERS_RECEIVE_ALL = 'PLAYERS.RECEIVE_ALL'\nexport const PLAYERS_RECEIVE_PLAYER = 'PLAYERS.RECEIVE_PLAYER'\nexport const PLAYERS_PENDING = 'PLAYERS.PENDING'\n\nexport const fetchAllPlayers = () => (dispatch: Dispatch) => {\n  getAllPlayers().then(players => {\n    dispatch(receiveAllPlayers(players));\n  })\n}\n\nexport const receiveAllPlayers = (players: Players) => ({\n  type: PLAYERS_RECEIVE_ALL,\n  payload: players,\n})\n\nexport const fetchPlayer = (id: string) => (dispatch: Dispatch) => {\n  dispatch(playerPending(id));\n  getPlayerById(id).then(player => {\n    dispatch(receivePlayer(player));\n  })\n}\n\nexport const playerPending = (id: string) => ({\n  type: PLAYERS_PENDING,\n  payload: id,\n})\n\nexport const receivePlayer = (player: Player) => ({\n  type: PLAYERS_RECEIVE_PLAYER,\n  payload: player,\n})","import { connect } from \"react-redux\";\n\nimport Players, { StateProps, DispatchProps } from \"./Players\";\nimport { State } from \"../../data/types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\nimport { fetchAllPlayers } from \"../../data/actions/players\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  players: arrayFromObject(state.players.byId),\n  status: state.players.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchAllPlayers: () => dispatch(fetchAllPlayers())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Players);\n","import React from 'react';\n\nfunction Home() {\n  return <h1>Home</h1>\n}\n\nexport default Home;","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Player } from '../../api/types';\n\nexport interface OwnProps {\n  readonly id: string;\n}\n\nexport interface StateProps {\n  readonly name: Player['name'] | null;\n  readonly pending: boolean;\n}\n\nexport interface DispatchProps {\n  fetchPlayer(id: OwnProps['id']): void;\n}\n\nexport type PlayerNameProps = StateProps & OwnProps & DispatchProps;\n\nconst PlayerName: FC<PlayerNameProps> = ({ id, name, fetchPlayer, pending }) => {\n  if (!name && !pending) {\n    fetchPlayer(id);\n  }\n  return  <Link to={`/players/${id}`}>{name}</Link>;\n}\n\nexport default PlayerName;","import { State } from \"../types/state\";\n\nexport const getPlayerName = (state: State, id: string) => {\n  const player = state.players.byId[id];\n\n  return player ? player.name : null;\n}\n\nexport const isPlayerPending = (state: State, id: string) => {\n  return state.players.pending[id];\n}","import PlayerName, { StateProps, OwnProps, DispatchProps } from \"./PlayerName\";\nimport { State } from \"../../data/types/state\";\nimport { connect } from \"react-redux\";\nimport { fetchPlayer } from \"../../data/actions/players\";\nimport { getPlayerName, isPlayerPending } from \"../../data/selectors/players\";\n\nconst mapStateToProps = (state: State, ownProps: OwnProps): StateProps => ({\n  name: getPlayerName(state, ownProps.id),\n  pending: isPlayerPending(state, ownProps.id),\n})\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchPlayer: (id: string) => dispatch(fetchPlayer(id)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlayerName);","import { database } from 'firebase';\nimport firebase from \"../lib/firebase\";\nimport { Game } from \"./types\";\nimport { Omit } from \"yargs\";\n\nexport const getAllGames = () => {\n  return firebase\n    .database()\n    .ref(\"games\")\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport const getLastNGames = (n: number) => {\n  return firebase\n    .database()\n    .ref(\"games\")\n    .limitToLast(n)\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport const getGameById = (id: string) => {\n  return firebase\n    .database()\n    .ref(`games/${id}`)\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport type AddGame = (game: Omit<Game, 'id' | 'time'>) => Promise<any>;\nexport const addGame: AddGame = ({\n  player1Id,\n  player2Id,\n  player1Score,\n  player2Score,\n  winnerId\n}) => {\n  const ref = firebase\n    .database()\n    .ref(\"games/\")\n    .push();\n\n  return ref.set({\n    time: database.ServerValue.TIMESTAMP,\n    id: ref.key,\n    player1Id,\n    player2Id,\n    player1Score,\n    player2Score,\n    winnerId\n  });\n};\n\nexport const deleteGame = (gameId: string) => {\n  const ref = firebase.database().ref(`games/${gameId}`);\n  \n  return ref.remove();\n}\n","import React, { useState, FC } from \"react\";\nimport { addGame } from \"../../api/games\";\nimport { Player } from \"../../api/types\";\n\nimport \"./GameForm.css\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface DispatchProps {\n  onAddGame(): void;\n  fetchAllPlayers(): void;\n}\n\nexport interface StateProps {\n  readonly players: Player[];\n  readonly status: STATUS;\n}\n\nexport type GameFormProps = DispatchProps & StateProps;\n\nconst GameForm: FC<GameFormProps> = ({ fetchAllPlayers, onAddGame, status, players }) => {\n  const [player1, setPlayer1] = useState(\"Player 1\");\n  const [player2, setPlayer2] = useState(\"Player 2\");\n  const [player1Score, setPlayer1Score] = useState<number>(0);\n  const [player2Score, setPlayer2Score] = useState<number>(0);\n\n  if (status === STATUS.NOT_REQUESTED) {\n    fetchAllPlayers();\n  }\n\n  const onSelect = (e: React.SyntheticEvent<HTMLSelectElement, Event>) => {\n    setPlayer1(e.currentTarget.value);\n  };\n\n  const onSelectPlayer2 = (\n    e: React.SyntheticEvent<HTMLSelectElement, Event>\n  ) => {\n    setPlayer2(e.currentTarget.value);\n  };\n\n  const onSubmitGame = () => {\n    if (!!player1Score && !!player2Score) {\n      const winnerId = player1Score > player2Score ? player1 : player2;\n\n      addGame({\n        player1Id: player1,\n        player2Id: player2,\n        player1Score,\n        player2Score,\n        winnerId\n      });\n\n      setPlayer1Score(0);\n      setPlayer2Score(0);\n      setPlayer1(\"Player 1\");\n      setPlayer2(\"Player 2\");\n\n      onAddGame();\n    }\n  };\n\n  const button =\n    player1 !== \"Player 1\" && player2 !== \"Player 2\" ? (\n      <button className=\"AddGame\" onClick={onSubmitGame}>\n        Add Game\n      </button>\n    ) : null;\n\n  return (\n    <>\n      <h2>Add Game</h2>\n      <div className=\"Forms\">\n        <div>\n          <h4>Player 1</h4>\n          <form>\n            <select onChange={onSelect} value={player1}>\n              <option value=\"Player 1\" disabled>\n                Select a player\n              </option>\n              {players.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n            <label>\n              Score\n              <input\n                type=\"number\"\n                value={player1Score}\n                max={17}\n                min={0}\n                onChange={e => setPlayer1Score(Number(e.currentTarget.value))}\n              />\n            </label>\n          </form>\n        </div>\n        <div>\n          <h4>Player 2</h4>\n          <form>\n            <select onChange={onSelectPlayer2} value={player2}>\n              <option value=\"Player 2\" disabled>\n                Select a player\n              </option>\n              {players.map(({ id, name }) => {\n                return player1 !== id ? (\n                  <option key={id} value={id}>\n                    {name}\n                  </option>\n                ) : null;\n              })}\n            </select>\n            <label>\n              Score\n              <input\n                type=\"number\"\n                value={player2Score}\n                max={17}\n                min={0}\n                onChange={e => setPlayer2Score(Number(e.currentTarget.value))}\n              />\n            </label>\n          </form>\n        </div>\n      </div>\n      {button}\n    </>\n  );\n};\n\nexport default GameForm;\n","import { getAllGames, getLastNGames } from \"../../api/games\";\nimport { Games } from \"../../api/types\";\nimport { Dispatch } from \"redux\";\n\nexport const fetchAllGames = () => (dispatch: Dispatch) => {\n  getAllGames().then(games => {\n    dispatch(receiveAllGames(games));\n  })\n}\n\nexport const GAMES_RECEIVE_ALL = 'GAMES.RECEIVE_ALL'\n\nexport const receiveAllGames = (games: Games) => ({\n  type: GAMES_RECEIVE_ALL,\n  payload: games,\n});\n\nexport const fetchNGames = (n: number) => (dispatch: Dispatch) => {\n  getLastNGames(n).then(games => {\n    dispatch(receiveNGames(games))\n  })\n}\n\nexport const GAMES_RECEIVE_N_GAMES = 'GAMES.RECEIVE_N_GAMES'\n\nexport const receiveNGames = (games: Games) => ({\n  type: GAMES_RECEIVE_N_GAMES,\n  payload: games,\n});\n\n","import { connect } from \"react-redux\";\n\nimport GameForm, { DispatchProps, StateProps } from \"./GameForm\";\nimport { fetchAllGames } from \"../../data/actions/games\";\nimport { State } from \"../../data/types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\nimport { fetchAllPlayers } from \"../../data/actions/players\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  players: arrayFromObject(state.players.byId),\n  status: state.players.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  onAddGame: () => dispatch(fetchAllGames()),\n  fetchAllPlayers: () => dispatch(fetchAllPlayers()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GameForm);\n","import React, { FC } from \"react\";\nimport { timeFromNow } from \"../../api/utils\";\n\nexport interface DateProps {\n  readonly date: string;\n}\n\nconst DateText: FC<DateProps> = ({ date }) => {\n  return (\n    <span\n      style={{\n        color: \"lightslategray\",\n        fontSize: \"12px\",\n        textTransform: \"uppercase\",\n        letterSpacing: \"0.1px\"\n      }}\n    >\n      {timeFromNow(date)}\n    </span>\n  );\n};\n\nexport default DateText;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Game } from \"../../api/types\";\nimport PlayerName from \"../PlayerName\";\nimport GameForm from \"../GameForm\";\n\nimport \"./Games.css\";\nimport DateText from \"../DateText\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface StateProps {\n  readonly games: Game[];\n  readonly status: string;\n}\n\nexport interface DispatchProps {\n  fetchAllGames(): void;\n}\n\nexport type GamesProps = StateProps & DispatchProps;\n\nfunction GamesPage(props: GamesProps) {\n  if (props.status === STATUS.NOT_REQUESTED) {\n    props.fetchAllGames();\n  }\n  \n  return (\n    <div className=\"Games\">\n      <h1>Games</h1>\n      <GameForm />\n      <h2>History</h2>\n      <ul>\n        {props.games.map((game: Game) => (\n          <li key={game.id} className=\"Game\">\n            <Link to={`/games/${game.id}`}>\n              <DateText date={game.time} />\n            </Link>\n            <div>\n              <PlayerName id={game.player1Id} />{\" \"}\n              <strong>{game.player1Score}</strong> vs{\" \"}\n              <strong>{game.player2Score}</strong>{\" \"}\n              <PlayerName id={game.player2Id} />\n            </div>\n            <div>\n              Winner:{\" \"}\n              <strong>\n                <PlayerName id={game.winnerId} />\n              </strong>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default GamesPage;\n","import { Game } from \"../../api/types\";\nimport { State } from \"../types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\n\nconst lastNGames = (n: number) => (games: Game[]) => {\n  const sliced = games.slice(games.length - n, games.length);\n\n  return sliced.reverse();\n};\n\nexport const last12Games = (state: State) => {\n  const games = arrayFromObject(state.games.byId);\n  const last12 = lastNGames(12);\n\n  return last12(games);\n};\n","import { connect } from \"react-redux\";\n\nimport Games, { StateProps, DispatchProps } from \"./Games\";\nimport { fetchAllGames } from \"../../data/actions/games\";\nimport { State } from \"../../data/types/state\";\nimport { last12Games } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  games: last12Games(state),\n  status: state.games.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchAllGames: () => dispatch(fetchAllGames())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Games);\n","import React, { FC } from 'react';\nimport { Player, Game } from '../../api/types';\nimport { gamesBetweenPlayers } from '../../api/utils';\n\nexport interface WinRateProps {\n  readonly player1Id: Player['id'];\n  readonly player2Id: Player['id'];\n  readonly games: Game[];\n}\n\nconst WinRate: FC<WinRateProps> = ({ player1Id, player2Id, games }) => {\n  const gamesBetweenTwoPlayers = gamesBetweenPlayers(player1Id, player2Id, games);\n  const player1Wins = gamesBetweenTwoPlayers.filter(game => game.winnerId === player1Id);\n\n  return (\n    <span>{Math.round((player1Wins.length/gamesBetweenTwoPlayers.length) * 100)}% ({gamesBetweenTwoPlayers.length})</span>\n  );\n}\n\nexport default WinRate;","import React, { FC, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { getPlayerById } from \"../../api/players\";\nimport { Player, Game } from \"../../api/types\";\nimport { getAllGames } from \"../../api/games\";\nimport { arrayFromObject, gamesByPlayerId, playersPlayerPlayed } from \"../../api/utils\";\nimport PlayerName from \"../PlayerName\";\nimport DateText from \"../DateText\";\n\nimport \"./PlayerProfile.css\";\nimport { Link } from \"react-router-dom\";\nimport WinRate from \"../WinRate\";\n\ninterface PlayerProfileRouterProps {\n  readonly id: string;\n}\n\ninterface PlayerProfileProps\n  extends RouteComponentProps<PlayerProfileRouterProps> {}\n\n\nconst PlayerProfile: FC<PlayerProfileProps> = ({ match }) => {\n  const [info, setInfo] = useState<Player>({ id: \"\", name: \"\" });\n  const [allGamesPlayed, setAllGamesPlayed] = useState<Game[]>([]);\n  const [playersPlayed, setPlayersPlayed] = useState<Player['id'][]>([]);\n  const userId = match.params.id;\n\n  const fetchAllGames = async () => {\n    const response = await getAllGames();\n    const games = response ? response : [];\n    const sortedGames = arrayFromObject(games).reverse();\n\n    setAllGamesPlayed(sortedGames);\n  };\n\n  const fetchAllOpponents = async (player: Player, allGames: Game[]) => {\n    const opponentIds = await playersPlayerPlayed(player, allGames);\n    setPlayersPlayed(arrayFromObject(opponentIds));\n  }\n  \n  useEffect(() => {\n    fetchAllGames();\n    getPlayerById(userId).then(player => {\n      setInfo(player);\n      fetchAllOpponents(player, allGamesPlayed);\n    });\n  }, [userId, allGamesPlayed]);\n  \n  const gamesPlayed = gamesByPlayerId(allGamesPlayed, userId);\n\n  return (\n    <div className=\"PlayerProfile\">\n      <h1>{info.name}</h1>\n      <h2>Win Rates</h2>\n      <div>\n        {\n          playersPlayed.map(opponentId => (\n            <div key={opponentId} className=\"opponent\">\n              <PlayerName id={opponentId} /> - <WinRate player1Id={userId} player2Id={opponentId} games={allGamesPlayed} />\n            </div>\n          ))\n        }\n      </div>\n      <h2>Games Played</h2>\n      <div className=\"PlayerGames\">\n        {gamesPlayed.map(game => (\n          <div className=\"PlayerGame\" key={game.id}>\n            <Link to={`/games/${game.id}`}>\n              <DateText date={game.time} />\n            </Link>\n            <div className=\"Content\">\n              <div className=\"opponent\">\n                Opponent:{\" \"}\n                {game.player1Id === userId ? (\n                  <PlayerName id={game.player2Id} />\n                ) : (\n                  <PlayerName id={game.player1Id} />\n                )}\n              </div>\n              <div className=\"score\">\n                {game.winnerId === userId ? `✅` : `❌`}\n                {game.player1Score} - {game.player2Score}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerProfile;\n","import React, { FC, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport { Game } from \"../../api/types\";\nimport { getGameById, deleteGame } from \"../../api/games\";\nimport PlayerName from \"../PlayerName\";\n\nimport \"./Game.css\";\nimport { dateFormat } from \"../../api/utils\";\n\ninterface GameRouterProps {\n  readonly id: string;\n}\n\ninterface GameProps extends RouteComponentProps<GameRouterProps> {}\n\nconst GamePage: FC<GameProps> = ({ match, history }) => {\n  const gameId = match.params.id;\n  const [game, setGame] = useState<Game>();\n\n  useEffect(() => {\n    getGameById(gameId).then(game => {\n      setGame(game);\n    });\n  }, [gameId]);\n\n  if (!game) {\n    return null;\n  }\n\n  const removeGame = (gameId: string) => {\n    const verify = window.confirm('Delete Game?');\n\n    if (verify) {\n      deleteGame(gameId).then(() => {\n        history.push(\"/games\");\n      });\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <h1>Game</h1>\n      <h4 style={{ marginBottom: 10 }}>\n        {dateFormat(game.time)}\n      </h4>\n      <div style={{ marginBottom: 20 }}>\n        <span className=\"remove\" onClick={() => removeGame(game.id)}>\n          Delete Game\n        </span>\n      </div>\n      <PlayerName id={game.player1Id} />\n      <h1>{game.player1Score}</h1>\n      <PlayerName id={game.player2Id} />\n      <h1>{game.player2Score}</h1>\n    </div>\n  );\n};\n\nexport default GamePage;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport Players from \"../Players\";\nimport Home from \"../Home\";\nimport Games from \"../Games\";\nimport PlayerProfile from \"../PlayerProfile\";\nimport Game from \"../Game\";\n\nfunction Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/players\" component={Players} />\n      <Route path=\"/players/:id\" component={PlayerProfile} />\n      <Route exact path=\"/games\" component={Games} />\n      <Route path=\"/games/:id\" component={Game} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <nav className=\"Nav\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/games\">Games</Link>\n        </li>\n        <li>\n          <Link to=\"/players\">Players</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { GAMES_RECEIVE_ALL, GAMES_RECEIVE_N_GAMES } from \"../actions/games\";\nimport { STATUS, State } from \"../types/state\";\n\nconst defaultState: State['games'] = {\n  status: STATUS.NOT_REQUESTED,\n  byId: {},\n  pending: {},\n};\n\ntype GamesActions = any;\n\nfunction GamesReducer(state = defaultState, action: GamesActions) {\n  switch(action.type) {\n    case GAMES_RECEIVE_N_GAMES:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...action.payload,\n        },\n        status: STATUS.FULFILLED,\n      }\n    case GAMES_RECEIVE_ALL:\n      return {\n        ...state,\n        byId: {\n          ...action.payload,\n        },\n        status: STATUS.FULFILLED,\n      }\n    default:\n      return state;\n  }\n}\n\nexport default GamesReducer;","import { STATUS, State } from \"../types/state\";\nimport {\n  PLAYERS_RECEIVE_ALL,\n  PLAYERS_RECEIVE_PLAYER,\n  PLAYERS_PENDING\n} from \"../actions/players\";\n\nconst defaultState: State[\"players\"] = {\n  status: STATUS.NOT_REQUESTED,\n  byId: {},\n  pending: {}\n};\n\ntype PlayersActions = any;\n\nfunction PlayersReducer(state = defaultState, action: PlayersActions) {\n  switch (action.type) {\n    case PLAYERS_PENDING:\n      return {\n        ...state,\n        pending: {\n          ...state.pending,\n          [action.payload]: true\n        }\n      };\n    case PLAYERS_RECEIVE_ALL:\n      return {\n        ...state,\n        byId: {\n          ...action.payload\n        },\n        status: STATUS.FULFILLED\n      };\n    case PLAYERS_RECEIVE_PLAYER:\n      return {\n        ...state,\n        pending: {\n          ...state.pending,\n          [action.payload.id]: false\n        },\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...action.payload\n          }\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nexport default PlayersReducer;\n","import { combineReducers } from 'redux'\n\nimport games from './games';\nimport players from './players';\n\nconst rootReducer = combineReducers({\n  games,\n  players,\n})\n\nexport default rootReducer;","import React from \"react\";\n\nimport \"./App.css\";\nimport Routes from \"./components/Routes\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport configureStore from \"./data/store/configureStore\";\n\nconst store = configureStore({});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Header />\n          <Routes />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst configureStore = (preloadedState: any) => createStore(\n  rootReducer,\n  preloadedState,\n  composeWithDevTools(applyMiddleware(thunk)),\n)\n\nexport default configureStore","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and players)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}