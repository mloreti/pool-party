{"version":3,"sources":["data/types/state.ts","lib/firebase/index.js","components/PlayerName/PlayerName.tsx","data/actions/players.ts","api/players.ts","api/utils.ts","data/selectors/games.ts","data/selectors/players.ts","components/PlayerName/PlayerNameContainer.ts","components/PlayerRating/PlayerRating.tsx","components/PlayerRating/PlayerRatingContainer.ts","components/Players/Players.tsx","components/Players/PlayersContainer.ts","components/Home/Home.tsx","components/GameForm/GameForm.tsx","api/games.ts","data/actions/games.ts","components/GameForm/GameFormContainer.ts","components/DateText/DateText.tsx","components/Games/Games.tsx","components/Games/GamesContainer.ts","components/WinRate/WinRate.tsx","components/WinRate/WinRateContainer.ts","components/PlayerProfile/PlayerProfile.tsx","components/PlayerProfile/PlayerProfileContainer.ts","components/Game/Game.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","data/reducers/games.ts","data/reducers/players.ts","data/reducers/index.ts","App.tsx","data/store/configureStore.ts","serviceWorker.js","index.js"],"names":["STATUS","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PlayerName","_ref","id","name","fetchPlayer","pending","_ref$useInitials","useInitials","renderedName","initialMatches","match","shift","pop","toUpperCase","getInitials","react_default","a","createElement","react_router_dom","to","concat","PLAYERS_RECEIVE_ALL","PLAYERS_RECEIVE_PLAYER","PLAYERS_PENDING","fetchAllPlayers","dispatch","database","ref","once","then","snapshot","val","players","receiveAllPlayers","type","payload","playerPending","getPlayerById","player","receivePlayer","arrayFromObject","obj","Object","keys","map","key","getCubicRootsReal","A","B","C","D","equalTo","getCubicRoots","real","last12Games","state","n","games","byId","slice","length","reverse","allGames","gamesBetweenPlayers","player1Id","player2Id","filter","game","gamesByPlayerId","getPlayerName","isPlayerPending","winRateBetweenPlayers","player1id","player2id","gamesBetweenTwoPlayers","winnerId","playerWithHighestRatingConfidence","highestConfidencePlayer","allPlayers","highestConfidence","forEach","ratingConfidence","computePlayerRating","compareToPlayer","rating","winRate","diff","Math","round","calculateRatingDifference","connect","ownProps","PlayerRating","Fragment","Players","status","_useState","useState","_useState2","slicedToArray","input","setInput","NOT_REQUESTED","className","value","onChange","event","currentTarget","placeholder","onClick","push","set","addPlayer","disabled","_ref2","PlayerNameContainer","PlayerRatingContainer","Home","GameForm","onAddGame","player1","setPlayer1","_useState3","_useState4","player2","setPlayer2","_useState5","_useState6","player1Score","setPlayer1Score","_useState7","_useState8","player2Score","setPlayer2Score","onInputClick","e","setSelectionRange","button","time","ServerValue","TIMESTAMP","addGame","pattern","min","max","Number","_ref3","fetchAllGames","receiveAllGames","GAMES_RECEIVE_ALL","GAMES_RECEIVE_N_GAMES","DateText","date","style","color","fontSize","fontWeight","textTransform","letterSpacing","Date","moment","startOf","fromNow","timeFromNow","getWinnerClass","GamesPage","props","GameFormContainer","components_DateText_DateText","Games","WinRate","totalGames","player1Wins","useStyles","makeStyles","avatar","margin","orangeAvatar","backgroundColor","deepOrange","purpleAvatar","deepPurple","PlayerProfile","opponentStats","gamesPlayed","classes","Avatar","stat","opponent","WinRateContainer","params","uniqueOpponentIds","opponentId","opponentForGame","indexOf","playersPlayerPlayed","GamePage","history","gameId","setGame","useEffect","removeGame","window","confirm","remove","deleteGame","marginBottom","format","dateFormat","Routes","react_router","exact","path","component","Game","Header","defaultState","GamesReducer","arguments","undefined","action","objectSpread","FULFILLED","PlayersReducer","defineProperty","rootReducer","combineReducers","store","preloadedState","createStore","composeWithDevTools","applyMiddleware","thunk","configureStore","bootstrapApp","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","apply","this","App","es","basename","process","components_Header_Header","Routes_Routes","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c73bfb1.chunk.js","sourcesContent":["import { Games, Players } from \"../../api/types\";\n\nexport enum STATUS {\n  NOT_REQUESTED = \"NOT_REQUESTED\",\n  PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\"\n}\n\nexport interface State {\n  games: {\n    byId: Games;\n    pending: {\n      [key: string]: boolean;\n    };\n    status: STATUS;\n  };\n  players: {\n    byId: Players;\n    pending: {\n      [key: string]: boolean;\n    };\n    status: STATUS;\n  };\n}\n","import firebase from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAyIdR5rJ6p-JX5BVMeoksBURFgAs5mD5U\",\n  authDomain: \"pool-party-app.firebaseapp.com\",\n  databaseURL: \"https://pool-party-app.firebaseio.com\",\n  projectId: \"pool-party-app\",\n  storageBucket: \"pool-party-app.appspot.com\",\n  messagingSenderId: \"875916367186\",\n  appId: \"1:875916367186:web:71a4c5d40ff62bda\"\n};\n\nexport default firebase.initializeApp(firebaseConfig);","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Player } from '../../api/types';\n\nexport interface OwnProps {\n  readonly id: string;\n  readonly useInitials?: boolean;\n}\n\nexport interface StateProps {\n  readonly name: Player['name'] | null;\n  readonly pending: boolean;\n}\n\nexport interface DispatchProps {\n  fetchPlayer(id: OwnProps['id']): void;\n}\n\nexport type PlayerNameProps = StateProps & OwnProps & DispatchProps;\n\n\nconst getInitials = (name: string | null) => {\n  if (!name) {\n    return '??';\n  }\n  let initialMatches = name.match(/\\b\\w/g) || [];\n  let initials = ((initialMatches.shift() || '') + (initialMatches.pop() || '')).toUpperCase();\n  return initials;\n}\n\nconst PlayerName: FC<PlayerNameProps> = ({ id, name, fetchPlayer, pending, useInitials = false }) => {\n  let renderedName = name;\n\n  if (!name && !pending) {\n    fetchPlayer(id);\n  }\n  if (useInitials) {\n    renderedName = getInitials(name);\n  }\n  return (\n    <Link to={`/players/${id}`}>{renderedName}</Link>\n  )  \n}\n\nexport default PlayerName;","import { Dispatch } from \"redux\";\nimport { getAllPlayers, getPlayerById } from \"../../api/players\";\nimport { Players, Player } from \"../../api/types\";\n\nexport const PLAYERS_RECEIVE_ALL = 'PLAYERS.RECEIVE_ALL'\nexport const PLAYERS_RECEIVE_PLAYER = 'PLAYERS.RECEIVE_PLAYER'\nexport const PLAYERS_PENDING = 'PLAYERS.PENDING'\n\nexport const fetchAllPlayers = () => (dispatch: Dispatch) => {\n  getAllPlayers().then(players => {\n    dispatch(receiveAllPlayers(players));\n  })\n}\n\nexport const receiveAllPlayers = (players: Players) => ({\n  type: PLAYERS_RECEIVE_ALL,\n  payload: players,\n})\n\nexport const fetchPlayer = (id: string) => (dispatch: Dispatch) => {\n  dispatch(playerPending(id));\n  getPlayerById(id).then(player => {\n    dispatch(receivePlayer(player));\n  })\n}\n\nexport const playerPending = (id: string) => ({\n  type: PLAYERS_PENDING,\n  payload: id,\n})\n\nexport const receivePlayer = (player: Player) => ({\n  type: PLAYERS_RECEIVE_PLAYER,\n  payload: player,\n})","import firebase from '../lib/firebase';\n\nexport const getAllPlayers = () => {\n  return firebase\n    .database()\n    .ref('players')\n    .once('value')\n    .then(snapshot => snapshot.val());\n}\n\nexport const getPlayerById = (id: string) => {\n  return firebase\n    .database()\n    .ref(`players/${id}`)\n    .once('value')\n    .then(snapshot => snapshot.val());\n}\n\ntype AddPlayer = (playerInfo: {name: string}) => Promise<any>;\nexport const addPlayer: AddPlayer = ({ name }) => {\n  const ref = firebase\n    .database()\n    .ref('players/')\n    .push();\n\n  return ref.set({\n    id: ref.key,\n    name,\n  });\n}","import { Game, Player } from \"./types\";\nimport moment from 'moment';\nimport { getCubicRoots } from 'cubic-roots';\n\ninterface Obj {\n  [key: string]: any;\n}\n\nexport const arrayFromObject = (obj: Obj) =>\n  Object.keys(obj).map(key => obj[key]);\n\n\n\ntype OpponentForGame = (id: Player['id'], game: Game) => Player['id'];\nexport const opponentForGame: OpponentForGame = (id, game) => \n  (game.player1Id === id ? game.player2Id : game.player1Id);\n\n\n\nexport const timeFromNow = (time: string) => {\n  const date = new Date(time);\n  const momentFormat = moment(date);\n\n  return momentFormat.startOf().fromNow();\n}\n\nexport const dateFormat = (time: string) => {\n  const date = new Date(time);\n  const momentFormat = moment(date).format('MMMM Do, YYYY - h:mm a');\n\n  return momentFormat;\n}\n\nexport const calculateRatingDifference = (winRate: number) => {\n  const diff = getCubicRootsReal(\n    0.000000001392724612439186,\n    -0.000002904144213167561,\n    0.002064097901975022,\n    0.4912753313135377,\n    winRate,\n  );\n  return Math.round(diff);\n}\n\n// The cubic equation solved is Ax3 + Bx2 + Cx + D = equalTo.\nexport const getCubicRootsReal = (A: number, B: number, C: number, D: number, equalTo: number) => {\n  const roots = getCubicRoots(A, B, C, D - equalTo);\n  return roots[0].real;\n}\n","import { Game, Player } from \"../../api/types\";\nimport { State } from \"../types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\n\nconst lastNGames = (n: number) => (games: Game[]) => {\n  const sliced = games.slice(games.length - n, games.length);\n\n  return sliced.reverse();\n};\n\nexport const last12Games = (state: State) => {\n  const games = arrayFromObject(state.games.byId);\n  const last12 = lastNGames(12);\n\n  return last12(games);\n};\n\nexport const allGames: (state: State) => Game[] = state => {\n  return arrayFromObject(state.games.byId);\n}\n\ntype GamesBetweenPlayers = (state: State, player1Id: Player['id'], player2Id: Player['id']) => Game[];\nexport const gamesBetweenPlayers: GamesBetweenPlayers = (state, player1Id, player2Id) => {\n  const games = allGames(state);\n  return games.filter(game => (\n    (game.player1Id === player1Id && game.player2Id === player2Id)\n    || \n    (game.player1Id === player2Id && game.player2Id === player1Id)\n  ));\n};\n\ntype GamesByPlayerId = (state: State, id: Player[\"id\"]) => Game[];\nexport const gamesByPlayerId: GamesByPlayerId = (state, id) => {\n  const games = allGames(state);\n  return games.filter(game => game.player1Id === id || game.player2Id === id);\n};\n\n\n","import { State } from \"../types/state\";\nimport { Player } from \"../../api/types\";\nimport { gamesBetweenPlayers, gamesByPlayerId } from \"./games\";\nimport { arrayFromObject, opponentForGame, calculateRatingDifference } from \"../../api/utils\";\n\nexport const getPlayerName = (state: State, id: string) => {\n  const player = getPlayerById(state, id);\n\n  return player ? player.name : null;\n}\n\nexport const getPlayerById = (state: State, id: string) => {\n  return state.players.byId[id];\n}\n\nexport const isPlayerPending = (state: State, id: string) => {\n  return state.players.pending[id];\n}\n\n\nexport const allPlayers: (state: State) => Player[] = state => {\n  return arrayFromObject(state.players.byId);\n}\n\n\nexport const winRateBetweenPlayers = (state: State, player1id: Player['id'], player2id: Player['id']) => {\n  const gamesBetweenTwoPlayers = gamesBetweenPlayers(state, player1id, player2id);\n  const player1Wins = gamesBetweenTwoPlayers.filter(game => game.winnerId === player1id);\n\n  return player1Wins.length/gamesBetweenTwoPlayers.length;\n}\n\nexport const playerWithHighestRatingConfidence = (state: State) => {\n  const players: Player[] = allPlayers(state);\n\n  let highestConfidence = 0;\n  let highestConfidencePlayer: Player | undefined;\n\n  arrayFromObject(players).forEach(player => {\n    if (player.ratingConfidence > highestConfidence) {\n      highestConfidence = player.ratingConfidence;\n      highestConfidencePlayer = player;\n    }\n  }); \n\n  return highestConfidencePlayer;\n}\n\ntype PlayersPlayerPlayed = (state: State, id: Player['id']) => Player['id'][];\nexport const playersPlayerPlayed: PlayersPlayerPlayed = (state, id) => {\n  const uniqueOpponentIds: Player['id'][] = [];\n  const gamesPlayerPlayed = gamesByPlayerId(state, id);\n\n  gamesPlayerPlayed.forEach(game => {\n    const opponentId = opponentForGame(id, game);\n    if (uniqueOpponentIds.indexOf(opponentId) < 0) {\n      uniqueOpponentIds.push(opponentId);\n    }\n  });\n\n  return uniqueOpponentIds;\n};\n\nexport const computePlayerRating = (state: State, id: Player['id']) => {\n  const compareToPlayer: Player | undefined = playerWithHighestRatingConfidence(state);\n  if (!compareToPlayer) {\n    return;\n  }\n  if (compareToPlayer.id === id) {\n    return compareToPlayer.rating;\n  }\n  const winRate = winRateBetweenPlayers(state, id, compareToPlayer.id);\n  return compareToPlayer.rating + calculateRatingDifference(winRate);\n}","import PlayerName, { StateProps, OwnProps, DispatchProps } from \"./PlayerName\";\nimport { State } from \"../../data/types/state\";\nimport { connect } from \"react-redux\";\nimport { fetchPlayer } from \"../../data/actions/players\";\nimport { getPlayerName, isPlayerPending } from \"../../data/selectors/players\";\n\nconst mapStateToProps = (state: State, ownProps: OwnProps): StateProps => ({\n  name: getPlayerName(state, ownProps.id),\n  pending: isPlayerPending(state, ownProps.id),\n})\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchPlayer: (id: string) => dispatch(fetchPlayer(id)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlayerName);","import React, { FC } from 'react';\n\nexport interface OwnProps {\n  readonly id: string;\n}\n\nexport interface StateProps {\n  readonly rating: number;\n}\n\nexport type PlayerRatingProps = StateProps & OwnProps;\n\nconst PlayerRating: FC<PlayerRatingProps> = ({ id, rating }) => {\n  return (\n    <>\n      {rating}\n    </>\n  )  \n}\n\nexport default PlayerRating;","import PlayerRating, { StateProps, OwnProps } from \"./PlayerRating\";\nimport { State } from \"../../data/types/state\";\nimport { connect } from \"react-redux\";\nimport { computePlayerRating } from \"../../data/selectors/players\";\n\nconst mapStateToProps = (state: State, ownProps: OwnProps): StateProps => ({\n  rating: computePlayerRating(state, ownProps.id) || 0\n})\n\nexport default connect(\n  mapStateToProps,\n)(PlayerRating);","import React, { useState, FC } from \"react\";\n\nimport { addPlayer } from \"../../api/players\";\nimport { Player } from \"../../api/types\";\nimport { STATUS } from \"../../data/types/state\";\n\nimport './Players.css';\nimport PlayerName from \"../PlayerName\";\nimport PlayerRating from \"../PlayerRating\";\n\nexport interface StateProps{\n  readonly players: Player[];\n  readonly status: STATUS;\n}\n\nexport interface DispatchProps {\n  fetchAllPlayers(): void;\n}\n\nexport type PlayersProps = StateProps & DispatchProps;\n\nconst Players: FC<PlayersProps> = ({ status, players, fetchAllPlayers}) => {\n  const [input, setInput] = useState(\"\");\n\n  if (status === STATUS.NOT_REQUESTED) {\n    fetchAllPlayers();\n  }\n\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.currentTarget.value);\n  };\n\n  const submit = () => {\n    addPlayer({ name: input }).then(() => {\n      fetchAllPlayers();\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"Players\">\n      <h1>Players</h1>\n      <input\n        name=\"name\"\n        value={input}\n        onChange={onInputChange}\n        placeholder=\"Player name\"\n      />\n      <button onClick={submit} disabled={input.length < 1}>Add Player</button>\n      <ul>\n        {players.map(({id}) => (\n          <li key={id}>\n            <PlayerName id={id} /> (<PlayerRating id={id} />)\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Players;\n","import { connect } from \"react-redux\";\n\nimport Players, { StateProps, DispatchProps } from \"./Players\";\nimport { State } from \"../../data/types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\nimport { fetchAllPlayers } from \"../../data/actions/players\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  players: arrayFromObject(state.players.byId),\n  status: state.players.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchAllPlayers: () => dispatch(fetchAllPlayers())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Players);\n","import React from 'react';\n\nfunction Home() {\n  return <h1>Home</h1>\n}\n\nexport default Home;","import React, { useState, FC } from \"react\";\nimport { addGame } from \"../../api/games\";\nimport { Player } from \"../../api/types\";\n\nimport \"./GameForm.css\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface DispatchProps {\n  onAddGame(): void;\n  fetchAllPlayers(): void;\n}\n\nexport interface StateProps {\n  readonly players: Player[];\n  readonly status: STATUS;\n}\n\nexport type GameFormProps = DispatchProps & StateProps;\n\nconst GameForm: FC<GameFormProps> = ({\n  fetchAllPlayers,\n  onAddGame,\n  status,\n  players\n}) => {\n  const [player1, setPlayer1] = useState(\"Player 1\");\n  const [player2, setPlayer2] = useState(\"Player 2\");\n  const [player1Score, setPlayer1Score] = useState<number>(0);\n  const [player2Score, setPlayer2Score] = useState<number>(0);\n\n  if (status === STATUS.NOT_REQUESTED) {\n    fetchAllPlayers();\n  }\n\n  const onSelect = (e: React.SyntheticEvent<HTMLSelectElement, Event>) => {\n    setPlayer1(e.currentTarget.value);\n  };\n\n  const onSelectPlayer2 = (\n    e: React.SyntheticEvent<HTMLSelectElement, Event>\n  ) => {\n    setPlayer2(e.currentTarget.value);\n  };\n\n  const onSubmitGame = () => {\n    const winnerId = player1Score > player2Score ? player1 : player2;\n\n    addGame({\n      player1Id: player1,\n      player2Id: player2,\n      player1Score,\n      player2Score,\n      winnerId\n    });\n\n    setPlayer1Score(0);\n    setPlayer2Score(0);\n    setPlayer1(\"Player 1\");\n    setPlayer2(\"Player 2\");\n\n    onAddGame();\n  };\n\n  const onInputClick = (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n    e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)\n  }\n\n  const button =\n    player1 !== \"Player 1\" && player2 !== \"Player 2\" ? (\n      <button className=\"AddGame\" onClick={onSubmitGame}>\n        Add Game\n      </button>\n    ) : null;\n\n  return (\n    <>\n      <h2>Add Game</h2>\n      <div className=\"Forms\">\n        <div>\n          <h4>Player 1</h4>\n          <form>\n            <select onChange={onSelect} value={player1}>\n              <option value=\"Player 1\" disabled>\n                Select a player\n              </option>\n              {players.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n            <label>\n              Score\n              <input\n                onClick={onInputClick}\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                value={player1Score}\n                min={0}\n                max={17}\n                onChange={e => setPlayer1Score(Number(e.currentTarget.value))}\n              />\n            </label>\n          </form>\n        </div>\n        <div>\n          <h4>Player 2</h4>\n          <form>\n            <select onChange={onSelectPlayer2} value={player2}>\n              <option value=\"Player 2\" disabled>\n                Select a player\n              </option>\n              {players.map(({ id, name }) => {\n                return player1 !== id ? (\n                  <option key={id} value={id}>\n                    {name}\n                  </option>\n                ) : null;\n              })}\n            </select>\n            <label>\n              Score\n              <input\n                onClick={onInputClick}\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                value={player2Score}\n                min={0}\n                max={17}\n                onChange={e => setPlayer2Score(Number(e.currentTarget.value))}\n              />\n            </label>\n          </form>\n        </div>\n      </div>\n      {button}\n    </>\n  );\n};\n\nexport default GameForm;\n","import { database } from 'firebase';\nimport firebase from \"../lib/firebase\";\nimport { Game } from \"./types\";\nimport { Omit } from \"yargs\";\n\nexport const getAllGames = () => {\n  return firebase\n    .database()\n    .ref(\"games\")\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport const getLastNGames = (n: number) => {\n  return firebase\n    .database()\n    .ref(\"games\")\n    .limitToLast(n)\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport const getGameById = (id: string) => {\n  return firebase\n    .database()\n    .ref(`games/${id}`)\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport type AddGame = (game: Omit<Game, 'id' | 'time'>) => Promise<any>;\nexport const addGame: AddGame = ({\n  player1Id,\n  player2Id,\n  player1Score,\n  player2Score,\n  winnerId\n}) => {\n  const ref = firebase\n    .database()\n    .ref(\"games/\")\n    .push();\n\n  return ref.set({\n    time: database.ServerValue.TIMESTAMP,\n    id: ref.key,\n    player1Id,\n    player2Id,\n    player1Score,\n    player2Score,\n    winnerId\n  });\n};\n\nexport const deleteGame = (gameId: string) => {\n  const ref = firebase.database().ref(`games/${gameId}`);\n  \n  return ref.remove();\n}\n","import { getAllGames, getLastNGames } from \"../../api/games\";\nimport { Games } from \"../../api/types\";\nimport { Dispatch } from \"redux\";\n\nexport const fetchAllGames = () => (dispatch: Dispatch) => {\n  getAllGames().then(games => {\n    dispatch(receiveAllGames(games));\n  })\n}\n\nexport const GAMES_RECEIVE_ALL = 'GAMES.RECEIVE_ALL'\n\nexport const receiveAllGames = (games: Games) => ({\n  type: GAMES_RECEIVE_ALL,\n  payload: games,\n});\n\nexport const fetchNGames = (n: number) => (dispatch: Dispatch) => {\n  getLastNGames(n).then(games => {\n    dispatch(receiveNGames(games))\n  })\n}\n\nexport const GAMES_RECEIVE_N_GAMES = 'GAMES.RECEIVE_N_GAMES'\n\nexport const receiveNGames = (games: Games) => ({\n  type: GAMES_RECEIVE_N_GAMES,\n  payload: games,\n});\n\n","import { connect } from \"react-redux\";\n\nimport GameForm, { DispatchProps, StateProps } from \"./GameForm\";\nimport { fetchAllGames } from \"../../data/actions/games\";\nimport { State } from \"../../data/types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\nimport { fetchAllPlayers } from \"../../data/actions/players\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  players: arrayFromObject(state.players.byId),\n  status: state.players.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  onAddGame: () => dispatch(fetchAllGames()),\n  fetchAllPlayers: () => dispatch(fetchAllPlayers()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GameForm);\n","import React, { FC } from \"react\";\nimport { timeFromNow } from \"../../api/utils\";\n\nexport interface DateProps {\n  readonly date: string;\n}\n\nconst DateText: FC<DateProps> = ({ date }) => {\n  return (\n    <span\n      style={{\n        color: \"silver\",\n        fontSize: \"10px\",\n        fontWeight: 'bold',\n        textTransform: \"uppercase\",\n        letterSpacing: \"0.1px\"\n      }}\n    >\n      {timeFromNow(date)}\n    </span>\n  );\n};\n\nexport default DateText;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Game } from \"../../api/types\";\nimport PlayerName from \"../PlayerName\";\nimport GameForm from \"../GameForm\";\n\nimport \"./Games.css\";\nimport DateText from \"../DateText\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface StateProps {\n  readonly games: Game[];\n  readonly status: string;\n}\n\nexport interface DispatchProps {\n  fetchAllGames(): void;\n}\n\nexport type GamesProps = StateProps & DispatchProps;\n\nconst getWinnerClass = (id: string, winnerId: string) => {\n  const winner = winnerId === id ? ' winner' :''\n\n  return `score` + winner;\n}\n\nfunction GamesPage(props: GamesProps) {\n  if (props.status === STATUS.NOT_REQUESTED) {\n    props.fetchAllGames();\n  }\n\n  return (\n    <div className=\"Games\">\n      <h1>Games</h1>\n      <GameForm />\n      <h2>History</h2>\n      <ul>\n        {props.games.map((game: Game) => (\n          <li key={game.id} className=\"Game\">\n            <Link to={`/games/${game.id}`}>\n              <DateText date={game.time} />\n            </Link>\n            <div>\n              <div className={getWinnerClass(game.player1Id, game.winnerId)}>\n                <PlayerName id={game.player1Id} /> {game.player1Score}\n              </div>\n              <div className={getWinnerClass(game.player2Id, game.winnerId)}>\n                <PlayerName id={game.player2Id} /> {game.player2Score}\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default GamesPage;\n","import { connect } from \"react-redux\";\n\nimport Games, { StateProps, DispatchProps } from \"./Games\";\nimport { fetchAllGames } from \"../../data/actions/games\";\nimport { State } from \"../../data/types/state\";\nimport { last12Games } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  games: last12Games(state),\n  status: state.games.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchAllGames: () => dispatch(fetchAllGames())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Games);\n","import React, { FC } from 'react';\nimport { Player } from '../../api/types';\n\nexport interface OwnProps {\n  readonly player1Id: Player['id'];\n  readonly player2Id: Player['id'];\n}\n\nexport interface StateProps {\n  readonly winRate: number;\n  readonly totalGames: number;\n}\n\nexport type WinRateProps = OwnProps & StateProps;\n\nconst WinRate: FC<WinRateProps> = ({ winRate, totalGames }) => {\n  return (\n    <span>\n      {winRate}% ({totalGames})\n    </span>\n  )\n}\n\nexport default WinRate;","import { connect } from \"react-redux\";\n\nimport WinRate, { StateProps, OwnProps } from \"./WinRate\";\nimport { State } from \"../../data/types/state\";\nimport { gamesBetweenPlayers } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (state: State, { player1Id, player2Id }: OwnProps): StateProps => {\n  const gamesBetweenTwoPlayers = gamesBetweenPlayers(state, player1Id, player2Id);\n  const player1Wins = gamesBetweenTwoPlayers.filter(game => game.winnerId === player1Id);\n  const winRate = Math.round((player1Wins.length/gamesBetweenTwoPlayers.length) * 100);\n\n  return {\n    winRate,\n    totalGames: gamesBetweenTwoPlayers.length,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(WinRate);\n","import React, { FC } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Player, Game } from \"../../api/types\";\nimport PlayerName from \"../PlayerName\";\nimport DateText from \"../DateText\";\nimport \"./PlayerProfile.css\";\nimport { Link } from \"react-router-dom\";\nimport WinRate from \"../WinRate/WinRateContainer\";\nimport { makeStyles, Avatar } from \"@material-ui/core\";\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport PlayerRating from \"../PlayerRating\";\n\n\ninterface OpponentStat {\n  readonly opponent: Player;\n  readonly winRate: number;\n}\n\nexport interface PlayerProfileMatchProps {\n  readonly id: string;\n}\n\nexport interface StateProps {\n  readonly name: Player['name'];\n  readonly ratingConfidence: Player['ratingConfidence'];\n  readonly gamesPlayed: Game[],\n  readonly opponentStats: OpponentStat[],\n}\n\nexport interface PlayerProfileRouteProps extends RouteComponentProps<PlayerProfileMatchProps> {}\n\nexport type PlayerProfileProps = PlayerProfileMatchProps & StateProps;\n\nconst useStyles = makeStyles({\n  avatar: {\n    margin: 10,\n  },\n  orangeAvatar: {\n    margin: 10,\n    color: '#fff',\n    backgroundColor: deepOrange[500],\n  },\n  purpleAvatar: {\n    margin: 10,\n    color: '#fff',\n    backgroundColor: deepPurple[500],\n  },\n});\n\nconst PlayerProfile: FC<PlayerProfileProps> = ({ id, name, opponentStats, gamesPlayed }) => {\n  const classes = useStyles();\n\n  if (!name) {\n    return null;\n  }\n\n  return (\n    <div className=\"PlayerProfile\">\n      <h1><Avatar className={classes.orangeAvatar}><PlayerName id={id} useInitials={true} /></Avatar> <PlayerName id={id} /> - <PlayerRating id={id} /></h1>\n      <h2>Win Rates</h2>\n      <div>\n        {\n          opponentStats.map(stat => (\n            <div className=\"opponent\" key={stat.opponent.id}>\n              <PlayerName id={stat.opponent.id} /> - <WinRate player1Id={id} player2Id={stat.opponent.id} />\n            </div>\n          ))\n        }\n      </div>\n      <h2>Games Played</h2>\n      <div className=\"PlayerGames\">\n        {gamesPlayed.map(game => (\n          <div className=\"PlayerGame\" key={game.id}>\n            <Link to={`/games/${game.id}`}>\n              <DateText date={game.time} />\n            </Link>\n            <div className=\"Content\">\n              <div className=\"opponent\">\n                Opponent:{\" \"}\n                {game.player1Id === id ? (\n                  <PlayerName id={game.player2Id} />\n                ) : (\n                  <PlayerName id={game.player1Id} />\n                )}\n              </div>\n              <div className=\"score\">\n                {game.winnerId === id ? `✅` : `❌`}\n                {game.player1Score} - {game.player2Score}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerProfile;\n","import { connect } from \"react-redux\";\n\nimport PlayerProfile, {\n  PlayerProfileProps,\n  PlayerProfileRouteProps\n} from \"./PlayerProfile\";\nimport { State, STATUS } from \"../../data/types/state\";\nimport {\n  getPlayerById,\n  winRateBetweenPlayers,\n  playersPlayerPlayed\n} from \"../../data/selectors/players\";\nimport { gamesByPlayerId } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (\n  state: State,\n  { match }: PlayerProfileRouteProps\n): PlayerProfileProps | {} => {\n  if (state.players.status === STATUS.NOT_REQUESTED) {\n    return {};\n  }\n\n\n  let { id } = match.params;\n  let player = getPlayerById(state, id);\n  const gamesPlayed = gamesByPlayerId(state, id);\n  const playersPlayed = playersPlayerPlayed(state, id);\n  const opponentStats = playersPlayed.map(opponentId => ({\n    opponent: getPlayerById(state, opponentId),\n    winRate: winRateBetweenPlayers(state, id, opponentId)\n  }));\n\n  return {\n    id,\n    name: player.name,\n    ratingConfidence: player.ratingConfidence,\n    gamesPlayed,\n    opponentStats\n  };\n};\n\nexport default connect(mapStateToProps)(PlayerProfile);\n","import React, { FC, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport { Game } from \"../../api/types\";\nimport { getGameById, deleteGame } from \"../../api/games\";\nimport PlayerName from \"../PlayerName\";\n\nimport \"./Game.css\";\nimport { dateFormat } from \"../../api/utils\";\n\ninterface GameRouterProps {\n  readonly id: string;\n}\n\ninterface GameProps extends RouteComponentProps<GameRouterProps> {}\n\nconst GamePage: FC<GameProps> = ({ match, history }) => {\n  const gameId = match.params.id;\n  const [game, setGame] = useState<Game>();\n\n  useEffect(() => {\n    getGameById(gameId).then(game => {\n      setGame(game);\n    });\n  }, [gameId]);\n\n  if (!game) {\n    return null;\n  }\n\n  const removeGame = (gameId: string) => {\n    const verify = window.confirm('Delete Game?');\n\n    if (verify) {\n      deleteGame(gameId).then(() => {\n        history.push(\"/games\");\n      });\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <h1>Game</h1>\n      <h4 style={{ marginBottom: 10 }}>\n        {dateFormat(game.time)}\n      </h4>\n      <div style={{ marginBottom: 20 }}>\n        <span className=\"remove\" onClick={() => removeGame(game.id)}>\n          Delete Game\n        </span>\n      </div>\n      <PlayerName id={game.player1Id} />\n      <h1>{game.player1Score}</h1>\n      <PlayerName id={game.player2Id} />\n      <h1>{game.player2Score}</h1>\n    </div>\n  );\n};\n\nexport default GamePage;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport Players from \"../Players\";\nimport Home from \"../Home\";\nimport Games from \"../Games\";\nimport PlayerProfile from \"../PlayerProfile\";\nimport Game from \"../Game\";\n\nfunction Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/players\" component={Players} />\n      <Route path=\"/players/:id\" component={PlayerProfile} />\n      <Route exact path=\"/games\" component={Games} />\n      <Route path=\"/games/:id\" component={Game} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <nav className=\"Nav\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/games\">Games</Link>\n        </li>\n        <li>\n          <Link to=\"/players\">Players</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { GAMES_RECEIVE_ALL, GAMES_RECEIVE_N_GAMES } from \"../actions/games\";\nimport { STATUS, State } from \"../types/state\";\n\nconst defaultState: State['games'] = {\n  status: STATUS.NOT_REQUESTED,\n  byId: {},\n  pending: {},\n};\n\ntype GamesActions = any;\n\nfunction GamesReducer(state = defaultState, action: GamesActions) {\n  switch(action.type) {\n    case GAMES_RECEIVE_N_GAMES:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...action.payload,\n        },\n        status: STATUS.FULFILLED,\n      }\n    case GAMES_RECEIVE_ALL:\n      return {\n        ...state,\n        byId: {\n          ...action.payload,\n        },\n        status: STATUS.FULFILLED,\n      }\n    default:\n      return state;\n  }\n}\n\nexport default GamesReducer;","import { STATUS, State } from \"../types/state\";\nimport {\n  PLAYERS_RECEIVE_ALL,\n  PLAYERS_RECEIVE_PLAYER,\n  PLAYERS_PENDING\n} from \"../actions/players\";\n\nconst defaultState: State[\"players\"] = {\n  status: STATUS.NOT_REQUESTED,\n  byId: {},\n  pending: {}\n};\n\ntype PlayersActions = any;\n\nfunction PlayersReducer(state = defaultState, action: PlayersActions) {\n  switch (action.type) {\n    case PLAYERS_PENDING:\n      return {\n        ...state,\n        pending: {\n          ...state.pending,\n          [action.payload]: true\n        }\n      };\n    case PLAYERS_RECEIVE_ALL:\n      return {\n        ...state,\n        byId: {\n          ...action.payload\n        },\n        status: STATUS.FULFILLED\n      };\n    case PLAYERS_RECEIVE_PLAYER:\n      return {\n        ...state,\n        pending: {\n          ...state.pending,\n          [action.payload.id]: false\n        },\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...action.payload\n          }\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nexport default PlayersReducer;\n","import { combineReducers } from 'redux'\n\nimport games from './games';\nimport players from './players';\n\nconst rootReducer = combineReducers({\n  games,\n  players,\n})\n\nexport default rootReducer;","import React from \"react\";\n\nimport \"./App.css\";\nimport Routes from \"./components/Routes\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport configureStore from \"./data/store/configureStore\";\nimport { fetchAllGames } from \"./data/actions/games\";\nimport { fetchAllPlayers } from \"./data/actions/players\";\n\nconst store = configureStore({});\n\nconst bootstrapApp = async () => {\n  (store as any).dispatch(fetchAllGames());\n  (store as any).dispatch(fetchAllPlayers());\n}\n\nfunction App() {\n  bootstrapApp();\n\n  return (\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Header />\n          <Routes />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst configureStore = (preloadedState: any) => createStore(\n  rootReducer,\n  preloadedState,\n  composeWithDevTools(applyMiddleware(thunk)),\n)\n\nexport default configureStore","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and players)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}