{"version":3,"sources":["data/types/state.ts","lib/firebase/index.js","components/Players/Players.tsx","api/players.ts","api/utils.ts","data/actions/players.ts","components/Players/PlayersContainer.ts","components/Home/Home.tsx","components/PlayerName/PlayerName.tsx","data/selectors/games.ts","data/selectors/players.ts","components/PlayerName/PlayerNameContainer.ts","components/GameForm/GameForm.tsx","api/games.ts","data/actions/games.ts","components/GameForm/GameFormContainer.ts","components/DateText/DateText.tsx","components/Games/Games.tsx","components/Games/GamesContainer.ts","components/WinRate/WinRate.tsx","components/WinRate/WinRateContainer.ts","components/PlayerProfile/PlayerProfile.tsx","components/PlayerProfile/PlayerProfileContainer.ts","components/Game/Game.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","data/reducers/games.ts","data/reducers/players.ts","data/reducers/index.ts","App.tsx","data/store/configureStore.ts","serviceWorker.js","index.js"],"names":["STATUS","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Players","_ref","status","players","fetchAllPlayers","_useState","useState","_useState2","Object","slicedToArray","input","setInput","NOT_REQUESTED","react_default","a","createElement","className","name","value","onChange","event","currentTarget","placeholder","onClick","ref","database","push","set","id","key","addPlayer","then","disabled","length","map","_ref2","react_router_dom","to","concat","arrayFromObject","obj","keys","getCubicRootsReal","A","B","C","D","equalTo","getCubicRoots","real","PLAYERS_RECEIVE_ALL","PLAYERS_RECEIVE_PLAYER","PLAYERS_PENDING","dispatch","once","snapshot","val","receiveAllPlayers","type","payload","fetchPlayer","playerPending","getPlayerById","player","receivePlayer","connect","state","byId","Home","PlayerName","pending","last12Games","n","games","slice","reverse","allGames","gamesBetweenPlayers","player1Id","player2Id","filter","game","gamesByPlayerId","getPlayerName","isPlayerPending","winRateBetweenPlayers","player1id","player2id","gamesBetweenTwoPlayers","winnerId","playerWithHighestRatingConfidence","highestConfidencePlayer","allPlayers","highestConfidence","forEach","ratingConfidence","computePlayerRating","compareToPlayer","rating","winRate","diff","Math","round","calculateRatingDifference","ownProps","GameForm","onAddGame","player1","setPlayer1","_useState3","_useState4","player2","setPlayer2","_useState5","_useState6","player1Score","setPlayer1Score","_useState7","_useState8","player2Score","setPlayer2Score","onInputClick","e","setSelectionRange","button","time","ServerValue","TIMESTAMP","addGame","Fragment","pattern","min","max","Number","_ref3","fetchAllGames","receiveAllGames","GAMES_RECEIVE_ALL","GAMES_RECEIVE_N_GAMES","DateText","date","style","color","fontSize","fontWeight","textTransform","letterSpacing","Date","moment","startOf","fromNow","timeFromNow","getWinnerClass","GamesPage","props","GameFormContainer","components_DateText_DateText","PlayerNameContainer","Games","WinRate","totalGames","player1Wins","PlayerProfile","opponentStats","gamesPlayed","stat","opponent","WinRateContainer","match","params","uniqueOpponentIds","opponentId","opponentForGame","indexOf","playersPlayerPlayed","GamePage","history","gameId","setGame","useEffect","removeGame","window","confirm","remove","deleteGame","marginBottom","format","dateFormat","Routes","react_router","exact","path","component","Game","Header","defaultState","GamesReducer","arguments","undefined","action","objectSpread","FULFILLED","PlayersReducer","defineProperty","rootReducer","combineReducers","store","preloadedState","createStore","composeWithDevTools","applyMiddleware","thunk","configureStore","App","es","basename","process","components_Header_Header","Routes_Routes","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ef0ff9e.chunk.js","sourcesContent":["import { Games, Players } from \"../../api/types\";\n\nexport enum STATUS {\n  NOT_REQUESTED = \"NOT_REQUESTED\",\n  PENDING = \"PENDING\",\n  FULFILLED = \"FULFILLED\"\n}\n\nexport interface State {\n  games: {\n    byId: Games;\n    pending: {\n      [key: string]: boolean;\n    };\n    status: STATUS;\n  };\n  players: {\n    byId: Players;\n    pending: {\n      [key: string]: boolean;\n    };\n    status: STATUS;\n  };\n}\n","import firebase from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAyIdR5rJ6p-JX5BVMeoksBURFgAs5mD5U\",\n  authDomain: \"pool-party-app.firebaseapp.com\",\n  databaseURL: \"https://pool-party-app.firebaseio.com\",\n  projectId: \"pool-party-app\",\n  storageBucket: \"pool-party-app.appspot.com\",\n  messagingSenderId: \"875916367186\",\n  appId: \"1:875916367186:web:71a4c5d40ff62bda\"\n};\n\nexport default firebase.initializeApp(firebaseConfig);","import React, { useState, FC } from \"react\";\n\nimport { addPlayer } from \"../../api/players\";\nimport { Player } from \"../../api/types\";\nimport { Link } from \"react-router-dom\";\nimport { STATUS } from \"../../data/types/state\";\n\nimport './Players.css';\n\nexport interface StateProps{\n  readonly players: Player[];\n  readonly status: STATUS;\n}\n\nexport interface DispatchProps {\n  fetchAllPlayers(): void;\n}\n\nexport type PlayersProps = StateProps & DispatchProps;\n\nconst Players: FC<PlayersProps> = ({ status, players, fetchAllPlayers}) => {\n  const [input, setInput] = useState(\"\");\n\n  if (status === STATUS.NOT_REQUESTED) {\n    fetchAllPlayers();\n  }\n\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.currentTarget.value);\n  };\n\n  const submit = () => {\n    addPlayer({ name: input }).then(() => {\n      fetchAllPlayers();\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"Players\">\n      <h1>Players</h1>\n      <input\n        name=\"name\"\n        value={input}\n        onChange={onInputChange}\n        placeholder=\"Player name\"\n      />\n      <button onClick={submit} disabled={input.length < 1}>Add Player</button>\n      <ul>\n        {players.map(({id, name}) => (\n          <li key={id}>\n            <Link to={`/players/${id}`}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Players;\n","import firebase from '../lib/firebase';\n\nexport const getAllPlayers = () => {\n  return firebase\n    .database()\n    .ref('players')\n    .once('value')\n    .then(snapshot => snapshot.val());\n}\n\nexport const getPlayerById = (id: string) => {\n  return firebase\n    .database()\n    .ref(`players/${id}`)\n    .once('value')\n    .then(snapshot => snapshot.val());\n}\n\ntype AddPlayer = (playerInfo: {name: string}) => Promise<any>;\nexport const addPlayer: AddPlayer = ({ name }) => {\n  const ref = firebase\n    .database()\n    .ref('players/')\n    .push();\n\n  return ref.set({\n    id: ref.key,\n    name,\n  });\n}","import { Game, Player } from \"./types\";\nimport moment from 'moment';\nimport { getCubicRoots } from 'cubic-roots';\n\ninterface Obj {\n  [key: string]: any;\n}\n\nexport const arrayFromObject = (obj: Obj) =>\n  Object.keys(obj).map(key => obj[key]);\n\n\n\ntype OpponentForGame = (id: Player['id'], game: Game) => Player['id'];\nexport const opponentForGame: OpponentForGame = (id, game) => \n  (game.player1Id === id ? game.player2Id : game.player1Id);\n\n\n\nexport const timeFromNow = (time: string) => {\n  const date = new Date(time);\n  const momentFormat = moment(date);\n\n  return momentFormat.startOf().fromNow();\n}\n\nexport const dateFormat = (time: string) => {\n  const date = new Date(time);\n  const momentFormat = moment(date).format('MMMM Do, YYYY - h:mm a');\n\n  return momentFormat;\n}\n\nexport const calculateRatingDifference = (winRate: number) => {\n  const diff = getCubicRootsReal(\n    0.000000001392724612439186,\n    -0.000002904144213167561,\n    0.002064097901975022,\n    0.4912753313135377,\n    winRate,\n  );\n  return Math.round(diff);\n}\n\n// The cubic equation solved is Ax3 + Bx2 + Cx + D = equalTo.\nexport const getCubicRootsReal = (A: number, B: number, C: number, D: number, equalTo: number) => {\n  const roots = getCubicRoots(A, B, C, D - equalTo);\n  return roots[0].real;\n}\n","import { Dispatch } from \"redux\";\nimport { getAllPlayers, getPlayerById } from \"../../api/players\";\nimport { Players, Player } from \"../../api/types\";\n\nexport const PLAYERS_RECEIVE_ALL = 'PLAYERS.RECEIVE_ALL'\nexport const PLAYERS_RECEIVE_PLAYER = 'PLAYERS.RECEIVE_PLAYER'\nexport const PLAYERS_PENDING = 'PLAYERS.PENDING'\n\nexport const fetchAllPlayers = () => (dispatch: Dispatch) => {\n  getAllPlayers().then(players => {\n    dispatch(receiveAllPlayers(players));\n  })\n}\n\nexport const receiveAllPlayers = (players: Players) => ({\n  type: PLAYERS_RECEIVE_ALL,\n  payload: players,\n})\n\nexport const fetchPlayer = (id: string) => (dispatch: Dispatch) => {\n  dispatch(playerPending(id));\n  getPlayerById(id).then(player => {\n    dispatch(receivePlayer(player));\n  })\n}\n\nexport const playerPending = (id: string) => ({\n  type: PLAYERS_PENDING,\n  payload: id,\n})\n\nexport const receivePlayer = (player: Player) => ({\n  type: PLAYERS_RECEIVE_PLAYER,\n  payload: player,\n})","import { connect } from \"react-redux\";\n\nimport Players, { StateProps, DispatchProps } from \"./Players\";\nimport { State } from \"../../data/types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\nimport { fetchAllPlayers } from \"../../data/actions/players\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  players: arrayFromObject(state.players.byId),\n  status: state.players.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchAllPlayers: () => dispatch(fetchAllPlayers())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Players);\n","import React from 'react';\n\nfunction Home() {\n  return <h1>Home</h1>\n}\n\nexport default Home;","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Player } from '../../api/types';\n\nexport interface OwnProps {\n  readonly id: string;\n}\n\nexport interface StateProps {\n  readonly name: Player['name'] | null;\n  readonly pending: boolean;\n}\n\nexport interface DispatchProps {\n  fetchPlayer(id: OwnProps['id']): void;\n}\n\nexport type PlayerNameProps = StateProps & OwnProps & DispatchProps;\n\nconst PlayerName: FC<PlayerNameProps> = ({ id, name, fetchPlayer, pending }) => {\n  if (!name && !pending) {\n    fetchPlayer(id);\n  }\n  return  <Link to={`/players/${id}`}>{name}</Link>;\n}\n\nexport default PlayerName;","import { Game, Player } from \"../../api/types\";\nimport { State } from \"../types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\n\nconst lastNGames = (n: number) => (games: Game[]) => {\n  const sliced = games.slice(games.length - n, games.length);\n\n  return sliced.reverse();\n};\n\nexport const last12Games = (state: State) => {\n  const games = arrayFromObject(state.games.byId);\n  const last12 = lastNGames(12);\n\n  return last12(games);\n};\n\nexport const allGames: (state: State) => Game[] = state => {\n  return arrayFromObject(state.games.byId);\n}\n\ntype GamesBetweenPlayers = (state: State, player1Id: Player['id'], player2Id: Player['id']) => Game[];\nexport const gamesBetweenPlayers: GamesBetweenPlayers = (state, player1Id, player2Id) => {\n  const games = allGames(state);\n  return games.filter(game => (\n    (game.player1Id === player1Id && game.player2Id === player2Id)\n    || \n    (game.player1Id === player2Id && game.player2Id === player1Id)\n  ));\n};\n\ntype GamesByPlayerId = (state: State, id: Player[\"id\"]) => Game[];\nexport const gamesByPlayerId: GamesByPlayerId = (state, id) => {\n  const games = allGames(state);\n  return games.filter(game => game.player1Id === id || game.player2Id === id);\n};\n\n\n","import { State } from \"../types/state\";\nimport { Player } from \"../../api/types\";\nimport { gamesBetweenPlayers, gamesByPlayerId } from \"./games\";\nimport { arrayFromObject, opponentForGame, calculateRatingDifference } from \"../../api/utils\";\n\nexport const getPlayerName = (state: State, id: string) => {\n  const player = getPlayerById(state, id);\n\n  return player ? player.name : null;\n}\n\nexport const getPlayerById = (state: State, id: string) => {\n  return state.players.byId[id];\n}\n\nexport const isPlayerPending = (state: State, id: string) => {\n  return state.players.pending[id];\n}\n\n\nexport const allPlayers: (state: State) => Player[] = state => {\n  return arrayFromObject(state.players.byId);\n}\n\n\nexport const winRateBetweenPlayers = (state: State, player1id: Player['id'], player2id: Player['id']) => {\n  const gamesBetweenTwoPlayers = gamesBetweenPlayers(state, player1id, player2id);\n  const player1Wins = gamesBetweenTwoPlayers.filter(game => game.winnerId === player1id);\n\n  return player1Wins.length/gamesBetweenTwoPlayers.length;\n}\n\nexport const playerWithHighestRatingConfidence = (state: State) => {\n  const players: Player[] = allPlayers(state);\n\n  let highestConfidence = 0;\n  let highestConfidencePlayer: Player | undefined;\n\n  arrayFromObject(players).forEach(player => {\n    if (player.ratingConfidence > highestConfidence) {\n      highestConfidence = player.ratingConfidence;\n      highestConfidencePlayer = player;\n    }\n  }); \n\n  return highestConfidencePlayer;\n}\n\ntype PlayersPlayerPlayed = (state: State, id: Player['id']) => Player['id'][];\nexport const playersPlayerPlayed: PlayersPlayerPlayed = (state, id) => {\n  const uniqueOpponentIds: Player['id'][] = [];\n  const gamesPlayerPlayed = gamesByPlayerId(state, id);\n\n  gamesPlayerPlayed.forEach(game => {\n    const opponentId = opponentForGame(id, game);\n    if (uniqueOpponentIds.indexOf(opponentId) < 0) {\n      uniqueOpponentIds.push(opponentId);\n    }\n  });\n\n  return uniqueOpponentIds;\n};\n\nexport const computePlayerRating = (state: State, id: Player['id']) => {\n  const compareToPlayer: Player | undefined = playerWithHighestRatingConfidence(state);\n  if (!compareToPlayer) {\n    return;\n  }\n  if (compareToPlayer.id === id) {\n    return compareToPlayer.rating;\n  }\n  const winRate = winRateBetweenPlayers(state, id, compareToPlayer.id);\n  return compareToPlayer.rating + calculateRatingDifference(winRate);\n}","import PlayerName, { StateProps, OwnProps, DispatchProps } from \"./PlayerName\";\nimport { State } from \"../../data/types/state\";\nimport { connect } from \"react-redux\";\nimport { fetchPlayer } from \"../../data/actions/players\";\nimport { getPlayerName, isPlayerPending } from \"../../data/selectors/players\";\n\nconst mapStateToProps = (state: State, ownProps: OwnProps): StateProps => ({\n  name: getPlayerName(state, ownProps.id),\n  pending: isPlayerPending(state, ownProps.id),\n})\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchPlayer: (id: string) => dispatch(fetchPlayer(id)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlayerName);","import React, { useState, FC } from \"react\";\nimport { addGame } from \"../../api/games\";\nimport { Player } from \"../../api/types\";\n\nimport \"./GameForm.css\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface DispatchProps {\n  onAddGame(): void;\n  fetchAllPlayers(): void;\n}\n\nexport interface StateProps {\n  readonly players: Player[];\n  readonly status: STATUS;\n}\n\nexport type GameFormProps = DispatchProps & StateProps;\n\nconst GameForm: FC<GameFormProps> = ({\n  fetchAllPlayers,\n  onAddGame,\n  status,\n  players\n}) => {\n  const [player1, setPlayer1] = useState(\"Player 1\");\n  const [player2, setPlayer2] = useState(\"Player 2\");\n  const [player1Score, setPlayer1Score] = useState<number>(0);\n  const [player2Score, setPlayer2Score] = useState<number>(0);\n\n  if (status === STATUS.NOT_REQUESTED) {\n    fetchAllPlayers();\n  }\n\n  const onSelect = (e: React.SyntheticEvent<HTMLSelectElement, Event>) => {\n    setPlayer1(e.currentTarget.value);\n  };\n\n  const onSelectPlayer2 = (\n    e: React.SyntheticEvent<HTMLSelectElement, Event>\n  ) => {\n    setPlayer2(e.currentTarget.value);\n  };\n\n  const onSubmitGame = () => {\n    const winnerId = player1Score > player2Score ? player1 : player2;\n\n    addGame({\n      player1Id: player1,\n      player2Id: player2,\n      player1Score,\n      player2Score,\n      winnerId\n    });\n\n    setPlayer1Score(0);\n    setPlayer2Score(0);\n    setPlayer1(\"Player 1\");\n    setPlayer2(\"Player 2\");\n\n    onAddGame();\n  };\n\n  const onInputClick = (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n    e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)\n  }\n\n  const button =\n    player1 !== \"Player 1\" && player2 !== \"Player 2\" ? (\n      <button className=\"AddGame\" onClick={onSubmitGame}>\n        Add Game\n      </button>\n    ) : null;\n\n  return (\n    <>\n      <h2>Add Game</h2>\n      <div className=\"Forms\">\n        <div>\n          <h4>Player 1</h4>\n          <form>\n            <select onChange={onSelect} value={player1}>\n              <option value=\"Player 1\" disabled>\n                Select a player\n              </option>\n              {players.map(({ id, name }) => (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n            <label>\n              Score\n              <input\n                onClick={onInputClick}\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                value={player1Score}\n                min={0}\n                max={17}\n                onChange={e => setPlayer1Score(Number(e.currentTarget.value))}\n              />\n            </label>\n          </form>\n        </div>\n        <div>\n          <h4>Player 2</h4>\n          <form>\n            <select onChange={onSelectPlayer2} value={player2}>\n              <option value=\"Player 2\" disabled>\n                Select a player\n              </option>\n              {players.map(({ id, name }) => {\n                return player1 !== id ? (\n                  <option key={id} value={id}>\n                    {name}\n                  </option>\n                ) : null;\n              })}\n            </select>\n            <label>\n              Score\n              <input\n                onClick={onInputClick}\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                value={player2Score}\n                min={0}\n                max={17}\n                onChange={e => setPlayer2Score(Number(e.currentTarget.value))}\n              />\n            </label>\n          </form>\n        </div>\n      </div>\n      {button}\n    </>\n  );\n};\n\nexport default GameForm;\n","import { database } from 'firebase';\nimport firebase from \"../lib/firebase\";\nimport { Game } from \"./types\";\nimport { Omit } from \"yargs\";\n\nexport const getAllGames = () => {\n  return firebase\n    .database()\n    .ref(\"games\")\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport const getLastNGames = (n: number) => {\n  return firebase\n    .database()\n    .ref(\"games\")\n    .limitToLast(n)\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport const getGameById = (id: string) => {\n  return firebase\n    .database()\n    .ref(`games/${id}`)\n    .once(\"value\")\n    .then(snapshot => snapshot.val());\n};\n\nexport type AddGame = (game: Omit<Game, 'id' | 'time'>) => Promise<any>;\nexport const addGame: AddGame = ({\n  player1Id,\n  player2Id,\n  player1Score,\n  player2Score,\n  winnerId\n}) => {\n  const ref = firebase\n    .database()\n    .ref(\"games/\")\n    .push();\n\n  return ref.set({\n    time: database.ServerValue.TIMESTAMP,\n    id: ref.key,\n    player1Id,\n    player2Id,\n    player1Score,\n    player2Score,\n    winnerId\n  });\n};\n\nexport const deleteGame = (gameId: string) => {\n  const ref = firebase.database().ref(`games/${gameId}`);\n  \n  return ref.remove();\n}\n","import { getAllGames, getLastNGames } from \"../../api/games\";\nimport { Games } from \"../../api/types\";\nimport { Dispatch } from \"redux\";\n\nexport const fetchAllGames = () => (dispatch: Dispatch) => {\n  getAllGames().then(games => {\n    dispatch(receiveAllGames(games));\n  })\n}\n\nexport const GAMES_RECEIVE_ALL = 'GAMES.RECEIVE_ALL'\n\nexport const receiveAllGames = (games: Games) => ({\n  type: GAMES_RECEIVE_ALL,\n  payload: games,\n});\n\nexport const fetchNGames = (n: number) => (dispatch: Dispatch) => {\n  getLastNGames(n).then(games => {\n    dispatch(receiveNGames(games))\n  })\n}\n\nexport const GAMES_RECEIVE_N_GAMES = 'GAMES.RECEIVE_N_GAMES'\n\nexport const receiveNGames = (games: Games) => ({\n  type: GAMES_RECEIVE_N_GAMES,\n  payload: games,\n});\n\n","import { connect } from \"react-redux\";\n\nimport GameForm, { DispatchProps, StateProps } from \"./GameForm\";\nimport { fetchAllGames } from \"../../data/actions/games\";\nimport { State } from \"../../data/types/state\";\nimport { arrayFromObject } from \"../../api/utils\";\nimport { fetchAllPlayers } from \"../../data/actions/players\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  players: arrayFromObject(state.players.byId),\n  status: state.players.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  onAddGame: () => dispatch(fetchAllGames()),\n  fetchAllPlayers: () => dispatch(fetchAllPlayers()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GameForm);\n","import React, { FC } from \"react\";\nimport { timeFromNow } from \"../../api/utils\";\n\nexport interface DateProps {\n  readonly date: string;\n}\n\nconst DateText: FC<DateProps> = ({ date }) => {\n  return (\n    <span\n      style={{\n        color: \"silver\",\n        fontSize: \"10px\",\n        fontWeight: 'bold',\n        textTransform: \"uppercase\",\n        letterSpacing: \"0.1px\"\n      }}\n    >\n      {timeFromNow(date)}\n    </span>\n  );\n};\n\nexport default DateText;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Game } from \"../../api/types\";\nimport PlayerName from \"../PlayerName\";\nimport GameForm from \"../GameForm\";\n\nimport \"./Games.css\";\nimport DateText from \"../DateText\";\nimport { STATUS } from \"../../data/types/state\";\n\nexport interface StateProps {\n  readonly games: Game[];\n  readonly status: string;\n}\n\nexport interface DispatchProps {\n  fetchAllGames(): void;\n}\n\nexport type GamesProps = StateProps & DispatchProps;\n\nconst getWinnerClass = (id: string, winnerId: string) => {\n  const winner = winnerId === id ? ' winner' :''\n\n  return `score` + winner;\n}\n\nfunction GamesPage(props: GamesProps) {\n  if (props.status === STATUS.NOT_REQUESTED) {\n    props.fetchAllGames();\n  }\n\n  return (\n    <div className=\"Games\">\n      <h1>Games</h1>\n      <GameForm />\n      <h2>History</h2>\n      <ul>\n        {props.games.map((game: Game) => (\n          <li key={game.id} className=\"Game\">\n            <Link to={`/games/${game.id}`}>\n              <DateText date={game.time} />\n            </Link>\n            <div>\n              <div className={getWinnerClass(game.player1Id, game.winnerId)}>\n                <PlayerName id={game.player1Id} /> {game.player1Score}\n              </div>\n              <div className={getWinnerClass(game.player2Id, game.winnerId)}>\n                <PlayerName id={game.player2Id} /> {game.player2Score}\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default GamesPage;\n","import { connect } from \"react-redux\";\n\nimport Games, { StateProps, DispatchProps } from \"./Games\";\nimport { fetchAllGames } from \"../../data/actions/games\";\nimport { State } from \"../../data/types/state\";\nimport { last12Games } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  games: last12Games(state),\n  status: state.games.status,\n});\n\nexport const mapDispatchToProps = (dispatch: any): DispatchProps => ({\n  fetchAllGames: () => dispatch(fetchAllGames())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Games);\n","import React, { FC } from 'react';\nimport { Player } from '../../api/types';\n\nexport interface OwnProps {\n  readonly player1Id: Player['id'];\n  readonly player2Id: Player['id'];\n}\n\nexport interface StateProps {\n  readonly winRate: number;\n  readonly totalGames: number;\n}\n\nexport type WinRateProps = OwnProps & StateProps;\n\nconst WinRate: FC<WinRateProps> = ({ winRate, totalGames }) => {\n  return (\n    <span>\n      {winRate}% ({totalGames})\n    </span>\n  )\n}\n\nexport default WinRate;","import { connect } from \"react-redux\";\n\nimport WinRate, { StateProps, OwnProps } from \"./WinRate\";\nimport { State } from \"../../data/types/state\";\nimport { gamesBetweenPlayers } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (state: State, { player1Id, player2Id }: OwnProps): StateProps => {\n  const gamesBetweenTwoPlayers = gamesBetweenPlayers(state, player1Id, player2Id);\n  const player1Wins = gamesBetweenTwoPlayers.filter(game => game.winnerId === player1Id);\n  const winRate = Math.round((player1Wins.length/gamesBetweenTwoPlayers.length) * 100);\n\n  return {\n    winRate,\n    totalGames: gamesBetweenTwoPlayers.length,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(WinRate);\n","import React, { FC } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Player, Game } from \"../../api/types\";\nimport PlayerName from \"../PlayerName\";\nimport DateText from \"../DateText\";\n\nimport \"./PlayerProfile.css\";\nimport { Link } from \"react-router-dom\";\nimport WinRate from \"../WinRate/WinRateContainer\";\n\ninterface OpponentStat {\n  readonly opponent: Player;\n  readonly winRate: number;\n}\n\nexport interface PlayerProfileMatchProps {\n  readonly id: string;\n}\n\nexport interface StateProps {\n  readonly name: Player['name'];\n  readonly rating: Player['rating'];\n  readonly ratingConfidence: Player['ratingConfidence'];\n  readonly gamesPlayed: Game[],\n  readonly opponentStats: OpponentStat[],\n}\n\nexport interface PlayerProfileRouteProps extends RouteComponentProps<PlayerProfileMatchProps> {}\n\nexport type PlayerProfileProps = PlayerProfileMatchProps & StateProps;\n\nconst PlayerProfile: FC<PlayerProfileProps> = (props) => {\n  let { id, name, rating, opponentStats, gamesPlayed } = props;\n  return (\n    <div className=\"PlayerProfile\">\n      <h1>{name} - {rating}</h1>\n      <h2>Win Rates</h2>\n      <div>\n        {\n          opponentStats.map(stat => (\n            <div className=\"opponent\" key={stat.opponent.id}>\n              <PlayerName id={stat.opponent.id} /> - <WinRate player1Id={id} player2Id={stat.opponent.id} />\n            </div>\n          ))\n        }\n      </div>\n      <h2>Games Played</h2>\n      <div className=\"PlayerGames\">\n        {gamesPlayed.map(game => (\n          <div className=\"PlayerGame\" key={game.id}>\n            <Link to={`/games/${game.id}`}>\n              <DateText date={game.time} />\n            </Link>\n            <div className=\"Content\">\n              <div className=\"opponent\">\n                Opponent:{\" \"}\n                {game.player1Id === id ? (\n                  <PlayerName id={game.player2Id} />\n                ) : (\n                  <PlayerName id={game.player1Id} />\n                )}\n              </div>\n              <div className=\"score\">\n                {game.winnerId === id ? `✅` : `❌`}\n                {game.player1Score} - {game.player2Score}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerProfile;\n","import { connect } from \"react-redux\";\n\nimport PlayerProfile, { PlayerProfileProps, PlayerProfileRouteProps } from \"./PlayerProfile\";\nimport { State } from \"../../data/types/state\";\nimport { computePlayerRating, getPlayerById, winRateBetweenPlayers, playersPlayerPlayed } from \"../../data/selectors/players\";\nimport { gamesByPlayerId } from \"../../data/selectors/games\";\n\nexport const mapStateToProps = (state: State, { match }: PlayerProfileRouteProps): PlayerProfileProps => {\n  let { id } = match.params;\n  let player = getPlayerById(state, id);\n  const rating = computePlayerRating(state, id) || 0;\n  const gamesPlayed = gamesByPlayerId(state, id);\n  const playersPlayed = playersPlayerPlayed(state, id);\n  const opponentStats = playersPlayed.map(opponentId => ({\n      opponent: getPlayerById(state, opponentId),\n      winRate: winRateBetweenPlayers(state, id, opponentId)\n  }));\n\n  return {\n    id,\n    name: player.name,\n    rating,\n    ratingConfidence: player.ratingConfidence,\n    gamesPlayed,\n    opponentStats,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(PlayerProfile);\n","import React, { FC, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport { Game } from \"../../api/types\";\nimport { getGameById, deleteGame } from \"../../api/games\";\nimport PlayerName from \"../PlayerName\";\n\nimport \"./Game.css\";\nimport { dateFormat } from \"../../api/utils\";\n\ninterface GameRouterProps {\n  readonly id: string;\n}\n\ninterface GameProps extends RouteComponentProps<GameRouterProps> {}\n\nconst GamePage: FC<GameProps> = ({ match, history }) => {\n  const gameId = match.params.id;\n  const [game, setGame] = useState<Game>();\n\n  useEffect(() => {\n    getGameById(gameId).then(game => {\n      setGame(game);\n    });\n  }, [gameId]);\n\n  if (!game) {\n    return null;\n  }\n\n  const removeGame = (gameId: string) => {\n    const verify = window.confirm('Delete Game?');\n\n    if (verify) {\n      deleteGame(gameId).then(() => {\n        history.push(\"/games\");\n      });\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <h1>Game</h1>\n      <h4 style={{ marginBottom: 10 }}>\n        {dateFormat(game.time)}\n      </h4>\n      <div style={{ marginBottom: 20 }}>\n        <span className=\"remove\" onClick={() => removeGame(game.id)}>\n          Delete Game\n        </span>\n      </div>\n      <PlayerName id={game.player1Id} />\n      <h1>{game.player1Score}</h1>\n      <PlayerName id={game.player2Id} />\n      <h1>{game.player2Score}</h1>\n    </div>\n  );\n};\n\nexport default GamePage;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport Players from \"../Players\";\nimport Home from \"../Home\";\nimport Games from \"../Games\";\nimport PlayerProfile from \"../PlayerProfile\";\nimport Game from \"../Game\";\n\nfunction Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/players\" component={Players} />\n      <Route path=\"/players/:id\" component={PlayerProfile} />\n      <Route exact path=\"/games\" component={Games} />\n      <Route path=\"/games/:id\" component={Game} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <nav className=\"Nav\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/games\">Games</Link>\n        </li>\n        <li>\n          <Link to=\"/players\">Players</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { GAMES_RECEIVE_ALL, GAMES_RECEIVE_N_GAMES } from \"../actions/games\";\nimport { STATUS, State } from \"../types/state\";\n\nconst defaultState: State['games'] = {\n  status: STATUS.NOT_REQUESTED,\n  byId: {},\n  pending: {},\n};\n\ntype GamesActions = any;\n\nfunction GamesReducer(state = defaultState, action: GamesActions) {\n  switch(action.type) {\n    case GAMES_RECEIVE_N_GAMES:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...action.payload,\n        },\n        status: STATUS.FULFILLED,\n      }\n    case GAMES_RECEIVE_ALL:\n      return {\n        ...state,\n        byId: {\n          ...action.payload,\n        },\n        status: STATUS.FULFILLED,\n      }\n    default:\n      return state;\n  }\n}\n\nexport default GamesReducer;","import { STATUS, State } from \"../types/state\";\nimport {\n  PLAYERS_RECEIVE_ALL,\n  PLAYERS_RECEIVE_PLAYER,\n  PLAYERS_PENDING\n} from \"../actions/players\";\n\nconst defaultState: State[\"players\"] = {\n  status: STATUS.NOT_REQUESTED,\n  byId: {},\n  pending: {}\n};\n\ntype PlayersActions = any;\n\nfunction PlayersReducer(state = defaultState, action: PlayersActions) {\n  switch (action.type) {\n    case PLAYERS_PENDING:\n      return {\n        ...state,\n        pending: {\n          ...state.pending,\n          [action.payload]: true\n        }\n      };\n    case PLAYERS_RECEIVE_ALL:\n      return {\n        ...state,\n        byId: {\n          ...action.payload\n        },\n        status: STATUS.FULFILLED\n      };\n    case PLAYERS_RECEIVE_PLAYER:\n      return {\n        ...state,\n        pending: {\n          ...state.pending,\n          [action.payload.id]: false\n        },\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...action.payload\n          }\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nexport default PlayersReducer;\n","import { combineReducers } from 'redux'\n\nimport games from './games';\nimport players from './players';\n\nconst rootReducer = combineReducers({\n  games,\n  players,\n})\n\nexport default rootReducer;","import React from \"react\";\n\nimport \"./App.css\";\nimport Routes from \"./components/Routes\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport configureStore from \"./data/store/configureStore\";\n\nconst store = configureStore({});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Header />\n          <Routes />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst configureStore = (preloadedState: any) => createStore(\n  rootReducer,\n  preloadedState,\n  composeWithDevTools(applyMiddleware(thunk)),\n)\n\nexport default configureStore","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and players)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}